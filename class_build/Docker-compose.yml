# 도커는 여러개 실행할 수 있다. 이때 여러 도커를 동시에 실행시키거나 중단 시킬 수 있는데, 이는 Docker-compose.yml 파일로 만든다.
# 컴퓨터 한대 한대를 services라 부른다.
# build => 최종 저장할 파일이 어딥니까?
# context => 현 위치에
# dockerfile => 이런 파일로 설정합니다.

version: "3.7"
services:
  class_build:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 3000:3000
# services:
#   class_backend: => 이름
#     build: => 대상 위치
#       context: . => 현재 위치를 뜻하는 점(.)
#       dockerfile: Dockerfile.frontend
#     ports:
#      - 3000:3000 => 본 컴퓨터에서 3000번 포트로 들어오면 도커 내 3000번 포트로 이동!
#   my_backend: => 또다른 도커가 있다면
#    build:
#       context:
#       dockerfile: Dockerfile.backend

# 이제 커널에서 명령함
# docker-compose build 이미지 저장까지.
# docker-compose up 이미지를 가져와 cmd 실행.

# 새로운 터미널을 연다
# docker ps => 도커 조회
# docker exec -it [CONTAINER ID] /bin/bash => 도커 접속, 쉘에서 도커로 접속됨을 알수있음. 빠져나올 땐 exit.
# 도커에서 yarn start할 경우 컴퓨터에서 도커로 이동하게 하기 위한, 그리고 도커 내에서 yarn start로 이동시키기 위한 포트포워딩 과정이 필요하다.

# 보통 쉘을 사용하는 상태가 포그라운드다. 포그라운드에 실행할 경우 도커를 끌 때 다시 꺼질 수 있다.
# 따라서 백그라운드에 실행해야 한다.

# docker-compose up -d 백그라운드로 실행
# docker-compose stop 백그라운드로 중단
